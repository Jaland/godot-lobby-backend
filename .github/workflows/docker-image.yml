# This workfow shows how to build a Docker image, tag and push it to DigitalOcean Container Registry, and
# deploy the application on a DIgitalOcean Kubernetes cluster. For description to the entire worklow, 
# see  .

name: Build, push, and deploy

# Controls when the action will run.
on:
  # Triggers the workflow on push request on the main branch for changes in the specified paths.
  push:
    branches:
      - main
    paths:
      - 'config/**'
      - 'server.py'
      - 'Dockerfile'
      - '.github/workflows/**'
      - pom.xml
      - src
  
env:
  IMAGE_NAME: lobby-example

# A workflow run is made up of one or more jobs that can run sequentially or in parallel.
jobs:
  # This workflow contains a single job called "build".
  build:
    # The type of runner that the job will run on.
    runs-on: ubuntu-latest
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it.
    - name: Checkout master
      uses: actions/checkout@main

    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it.
    - name: Build Application
      run: mvn clean install

    # Install doctl.
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
    - name: Log in to DigitalOcean Container Registry with short-lived credentials
      run: doctl registry login --expiry-seconds 1200

    ###################################
    ################
    # Uncomment the next two steps out to push a new tag with the commit hash every time. Note that only pushing latest will save you space if you are using the DO free teir
    ################
    # Build a Docker image of your application in your registry and tag the image with the $GITHUB_SHA.
    # - name: Build JVM container image (Commit)
    #   run: docker build -t ${{ secrets.REGISTRY_BASE_URL }}/${{ secrets.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:$(echo $GITHUB_SHA | head -c7) -f src/main/docker/Dockerfile.jvm .

    # - name: Push image to DigitalOcean Container Registry (Commit Tag)
    #   run: docker push ${{ secrets.REGISTRY_BASE_URL }}/${{ secrets.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:$(echo $GITHUB_SHA | head -c7)
    ###################################


    # Build a Docker image of your application in your registry and tag the image with latest.
    - name: Build JVM container image (Latest)
      run: docker build -t ${{ secrets.REGISTRY_BASE_URL }}/${{ secrets.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:latest -f src/main/docker/Dockerfile.jvm .

    # Remove the next 3 steps if you don't want to have an always up to date latest tag
    - name: Remove Latest Tag from Image Repository
      run: doctl registry repository delete-tag -f ${{ secrets.REGISTRY_NAME }} latest

    - name: Push image to DigitalOcean Container Registry (Latest Tag)
      run: docker push ${{ secrets.REGISTRY_BASE_URL }}/${{ secrets.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:latest

    # Note we want to do this after we push the image so we don't have to redownload base layers of our image
    - name: Repository Garbage Collection
      run: doctl registry garbage-collection -f start